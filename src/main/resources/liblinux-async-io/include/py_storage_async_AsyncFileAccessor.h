/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class py_storage_async_AsyncFileAccessor */

#ifndef _Included_py_storage_async_AsyncFileAccessor
#define _Included_py_storage_async_AsyncFileAccessor
#ifdef __cplusplus
extern "C" {
#endif
#undef py_storage_async_AsyncFileAccessor_ERR_SUCCESS
#define py_storage_async_AsyncFileAccessor_ERR_SUCCESS 0L
#undef py_storage_async_AsyncFileAccessor_ERR_FAIL
#define py_storage_async_AsyncFileAccessor_ERR_FAIL -1L
/*
 * Class:     py_storage_async_AsyncFileAccessor
 * Method:    open
 * Signature: (Ljava/lang/String;I)J
 */
JNIEXPORT jlong JNICALL Java_py_storage_async_AsyncFileAccessor_open
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     py_storage_async_AsyncFileAccessor
 * Method:    close
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_py_storage_async_AsyncFileAccessor_close
  (JNIEnv *, jclass, jlong);

/*
 * Class:     py_storage_async_AsyncFileAccessor
 * Method:    write
 * Signature: (JJJILpy/storage/async/Callback;)V
 */
JNIEXPORT void JNICALL Java_py_storage_async_AsyncFileAccessor_write
  (JNIEnv *, jclass, jlong, jlong, jlong, jint, jobject);

/*
 * Class:     py_storage_async_AsyncFileAccessor
 * Method:    read
 * Signature: (JJJILpy/storage/async/Callback;)V
 */
JNIEXPORT void JNICALL Java_py_storage_async_AsyncFileAccessor_read
  (JNIEnv *, jclass, jlong, jlong, jlong, jint, jobject);

/*
 * Class:     py_storage_async_AsyncFileAccessor
 * Method:    enableDiskCheck
 * Signature: (JIIDILpy/storage/async/Callback;)V
 */
JNIEXPORT void JNICALL Java_py_storage_async_AsyncFileAccessor_enableDiskCheck
  (JNIEnv *, jclass, jlong, jint, jint, jdouble, jint, jobject);

#ifdef __cplusplus
}
#endif
#endif
